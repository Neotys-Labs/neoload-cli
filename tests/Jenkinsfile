pipeline {
  agent any

  environment {
      SEE_ENVIRONMENT_PREPARE='if you want to know secrets'
  }

  stages {
    stage('Configure Job') {
      agent any
      steps {
        script {
          env.DATETIMESTAMP = sh(returnStdout: true, script: "echo \$(date '+%Y%m%d-%H%M%S')").trim()
          env.JUST_BRANCH_NAME = "${env.GIT_BRANCH}".replace("origin/","")
          env.REL_LOG_PATH = "tests/history/test_${env.DATETIMESTAMP}_" +
                              "${env.JUST_BRANCH_NAME}" +
                              "_${env.GIT_COMMIT}.txt"
          env.GIT_COMMIT_URL = "${env.GIT_URL}".replace(".git","/commit/")+"${env.GIT_COMMIT}"
          env.LOG_PATH_URL = "${env.GIT_URL}".replace(".git","/blob/"+"${env.JUST_BRANCH_NAME}"+"/")+"${env.REL_LOG_PATH}"
          env.J_GID = sh(returnStdout: true, script: "id -g jenkins").trim()
          env.J_UID = sh(returnStdout: true, script: "id -u jenkins").trim()
          env.WHOAMI = sh(returnStdout: true, script: "whoami").trim()
          env.UNAMEN = sh(returnStdout: true, script: "uname -n").trim()

          sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'
          sh """\
          git config --global user.name '""" + "${env.JOB_NAME}#${env.BUILD_NUMBER}" + """'
          git config --global user.email '""" + "${env.WHOAMI}@${env.UNAMEN}" + """'
          """
        }
      }
    }
    stage('Attach Worker') {
      agent {
        dockerfile { // load python container
          additionalBuildArgs "--build-arg PYPI_VERSION=0.3.6" // version is arbitrary for this pipeline b/c we will remove it with pip uninstall
          args "--user root -v /var/run/docker.sock:/var/run/docker.sock"
          dir 'tests/docker/dind-python3'
        }
      }
      stages {
        stage('Prep environment') {
          steps {
              script {
                  sh """addgroup -g ${env.J_GID} jenkins
                  adduser -u ${env.J_UID} -G jenkins -g 'Linux User named' -s /sbin/nologin -D jenkins
                  """
              }
          }
        }
        stage('Get NeoLoad CLI') {
          steps {
              script { // Slack notification: STARTING
                  payload = '{"text":"[STARTING] NeoLoad-CLI build status.\nBranch: '+"${env.GIT_BRANCH}"+'\nSee: '+"${env.BUILD_URL}"+'\nBased on: '+"${env.GIT_COMMIT_URL}"+'"}'
                  sh """curl -s \
                  -X POST -H 'Content-type: application/json' \
                  --data '""" + payload + """' \
                  """ + env.SLACK_URL
                }
              sh "pip freeze | xargs pip uninstall -q -y"
              sh "python3 -m pip install -q -e ./" // ...the current commit's version
              sh "neoload --version"
          }
        }
        stage('Run PyTest') {
          steps {
              // uname adds system name/identity of where this is run for audit
              // parenthesis for uname AND python3 tests into same tee output File
              // tee produces stdout in this same CI output plus a file for checkin
              // exit PIPESTATUS to retain python test exit code for proper pass/fail
              script {
                  // a lot of this has to do with use of PIPESTATUS and bash exclusivity
                  pipeSubstitution = "\${PIPESTATUS[0]}"
                  tempShellFile = './pytest.temp.sh'
                  shellCommand = """#!/usr/bin/env bash
                      (uname -a && \
                      python3 -m pytest \
                      --durations=20 \
                      -v --junitxml=pytest_junit.xml \
                      tests \
                      ) \
                      | tee \
                      """ + "${env.REL_LOG_PATH}" + """ \
                      ; ( exit """ + pipeSubstitution + """ ) \
                  """
                  while(shellCommand.contains("  ")) shellCommand = shellCommand.replace("  "," ")
                  //echo shellCommand
                  writeFile text: shellCommand, file: tempShellFile
                  //sh 'cat ' + tempShellFile
                  sh 'chmod +x ' + tempShellFile
                  sh tempShellFile

                  stash(name:'REL_LOG_PATH', includes: env.REL_LOG_PATH)
                  sh 'chown -R jenkins:jenkins ' + env.REL_LOG_PATH
              }
          }
          post {
              always {
                  junit 'pytest_junit.xml'
              }
          }
        }
      }
    }
    stage('Commit Logs back to Repo') { // only executes when tests pass
      agent any
      steps {
        unstash(name:'REL_LOG_PATH')
        script {
          withCredentials([usernamePassword(credentialsId: 'neoload-cli-creds', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')])
          {
            sh """\
            git checkout """ + "${env.JUST_BRANCH_NAME}" + """
            git pull
            git add '""" + "${env.REL_LOG_PATH}" + """'
            git commit -m 'Auto commit test logs from build """ + "${env.JOB_NAME}" + "#" + "${env.BUILD_NUMBER}" + """'
            git push -u origin """ + "${env.JUST_BRANCH_NAME}" + """
            """
          }
        }
      }
    }
  }
  post {
    always {
        script { // Slack notification: final build status
          def logMsgText = fileExists(env.REL_LOG_PATH) ? '\nLogs: '+"${env.LOG_PATH_URL}" : ''
          payload = '{"text":"[' + "${currentBuild.currentResult}" + '] NeoLoad-CLI build status.\nBranch: '+"${env.GIT_BRANCH}"+'\nSee: '+"${env.BUILD_URL}"+'\nBased on: '+"${env.GIT_COMMIT_URL}"+logMsgText+'"}'
          sh """curl -s \
          -X POST -H 'Content-type: application/json' \
          --data '""" + payload + """' \
          """ + env.SLACK_URL
        }
    }
  }
}
