pipeline {
  agent none

  environment {
      SEE_ENVIRONMENT_PREPARE='if you want to know secrets'
      // https://api.slack.com/apps/AQSDLPATU/incoming-webhooks?success=1
  }

  stages {
    stage('Grab Utility Repo') {
      agent { label 'master' }
      steps {
        cleanWs()
        //sh("printenv")
        script {
          env.DATETIMESTAMP = sh(returnStdout: true, script: "echo \$(date '+%Y%m%d-%H%M%S')").trim()
          env.REL_LOG_PATH = "tests/history/test_${env.DATETIMESTAMP}_" +
                              "${env.GIT_BRANCH}".replace("origin/","") +
                              "_${env.GIT_COMMIT}.txt"
          env.GIT_COMMIT_URL = "${env.GIT_URL}".replace(".git","/commit/")+"${env.GIT_COMMIT}"
          env.LOG_PATH_URL = "${env.GIT_URL}".replace(".git","/")+"${env.REL_LOG_PATH}"
        }
      }
    }
    stage('Attach Worker') {
      agent {
        dockerfile { // load python container
          args "--user root -v /var/run/docker.sock:/var/run/docker.sock"
          dir 'tests/docker/dind-python3'
        }
      }
      stages {
        stage('Prep environment') {
          steps {
              script {
                  sh 'apk add curl' // for Slack direct curls, no assumed plugin
                  sh "echo 'REL_LOG_PATH: ${env.REL_LOG_PATH}'"
              }
          }
        }
        stage('Get NeoLoad CLI') {
          steps {
              script { // Slack notification: STARTING
                  payload = '{"text":"[STARTING] NeoLoad-CLI build status.\nBranch: '+"${env.GIT_BRANCH}"+'\nSee: '+"${env.BUILD_URL}"+'\nBased on: '+"${env.GIT_COMMIT_URL}"+'"}'
                  sh """curl -s \
                  -X POST -H 'Content-type: application/json' \
                  --data '""" + payload + """' \
                  """ + env.SLACK_URL
                }
              sh "python3 -m pip install -q -e ./"
          }
        }
        stage('Run PyTest') {
          steps {
              // uname adds system name/identity of where this is run for audit
              // parenthesis for uname AND python3 tests into same tee output File
              // tee produces stdout in this same CI output plus a file for checkin
              // exit PIPESTATUS to retain python test exit code for proper pass/fail
              //try {
              script {
                sh 'bash --version'
                pipeSubstitution = "\${PIPESTATUS[0]}"
                shellCommand = """#!/usr/bin/env bash
                (uname -a && \
                    python3 -m pytest \
                    -v --junitxml=pytest_junit.xml \
                    tests) \
                    | tee \
                    """ + "${env.REL_LOG_PATH}" + """ \
                    ; ( exit """ + pipeSubstitution + """ ) \
                """
                while(shellCommand.contains("  ")) shellCommand = shellCommand.replace("  "," ")
                echo shellCommand
                writeFile text: shellCommand, file: 'pytest.temp.sh'
                sh 'cat pytest.temp.sh'
                sh 'chmod +x ./pytest.temp.sh'
                sh './pytest.temp.sh'
              //} catch(Exception ex) {

              //}
            }
          }
          post {
              always {
                  junit 'pytest_junit.xml'
              }
          }
        }
      }
        post {
          always {
              script { // Slack notification: final build status
                  payload = '{"text":"[' + "${currentBuild.currentResult}" + '] NeoLoad-CLI build status.\nBranch: '+"${env.GIT_BRANCH}"+'\nSee: '+"${env.BUILD_URL}"+'\nBased on: '+"${env.GIT_COMMIT_URL}"+'\nLogs: '+"${env.LOG_PATH_URL}"+'"}'
                  sh """curl -s \
                  -X POST -H 'Content-type: application/json' \
                  --data '""" + payload + """' \
                  """ + env.SLACK_URL
              }
          }
        }
    }
  }
}
